SECURITY

Authentication:
- End user auth is handled by the app itself
- K8S does not manage users directly. Relies on files or 3rd party.
- It does allow serviceAccounts

kube-apiserver authenticates users when they run kubectl
auth and token files are not recommended because they are insecure
files require volume mount to provide files
- static PW file
  csv file with PW, UN, UID, [GID] that specified with --basic-auth-file when starting kube-apiserver
  /etc/kubernetes/manifests/kube-apiserver.yaml
  To auth: curl -v -k https://master-ip:6443/api/v1/pods -u "user1:password"
- static token file
  - csv file with token, UN, UID, [GID]
  - specify file with --token-auth-file when starting kube-apiserver
  - To auth: curl -v -k https://master-ip:6443/api/v1/pods --header "Authorization: Bearer [token]"
- certificates
  
- Identity services


Specifying certs in config file:
=== $HOME/.kube/config
--server my-server:6443
--client-key admin.key
--client-certificate admin.crt
--certificate-authority ca.crt
===
This will allow the configs to be used automatically when you run kubectl

KubeConfig File:
=== $HOME/.kube/config
apiVersion: v1
kind: Config
current-context: my-kube-admin@my-playground # sets default context
clusters:
- name: my-playground
  cluster: 
    certificate-authority: /etc/kubernetes/pki/ca.crt
    server: https://my-playground:6443
contexts:
- name: my-kube-admin@my-playground
  context:
    cluster: my-playground
    user: my-admin
    namespace: finance # sets default namespace
users:
- name: my-admin
  user:
    client-certificate: admin.crt
    client-key: admin.key
===

Update current context:
kubectl config use-context another@another


kubectl proxy: allows you to curl kubeapi without auth
kube proxy: enables connectivity between nodes and pods

all resources in K8S are grouped into API groups, 
- Core/legacy: /api/v1
- Named groups: /apis/$GROUP_NAME/$VERSION
  IE /apis/apps|storage.k8s.io|extensions/v1


AUTHORIZATION

What are you authorized to do?

Mechanisms:
- Node: 
- Attribute Based: JSON file with users/groups
- Role Based: 
- Webhook: Enables 3rd party tools like Open Policy Agent
- Always allow
- Always deny

- Set using --authorization-mode in config file
- When using multiple modes, you use each one in the order specified.
- When a module denies, we go to the next module in the list. When approved, that's it.

 RBAC:
=== dev-role.yml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: dev
rules:
- apiGroups: [""]
  resources: ["Pods"]
  verbs: ["list", "get", "create"]
===

Role to User Binding:
=== devuser-dev-binding.yml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: devuser-dev-binding
subjects:
- kind: User
  name: dev-user
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: Dev
  apiGroup: rbac.authorization.k8s.io
===

Check Access:
kubectl auth can-i create deployments
kubectl auth can-i create deployments --as dev-user --namespace test

Check auth mode:
***kubectl describe pod kube-apiserver-controlplane -n kube-system

kubectl create role -h
kubectl create rolebinding -h

Roles are for namespaced resources only
ClusterRoles can be for namespaced resources or across all namespaces or for cluster-scoped resources


How do you specify namespace when fucking with roles/rolebindings?
If you don't specify namespace, they are created in the default namespace.
You can specify namespace in metadata


CLUSTER ROLES:
- Resources are namespaced or cluster-scoped
- Cluster-scoped: List: kubectl api-resources --namespaced=false
  - nodes
  - PV
  - clusterroles
  - CRBindings
  - CSRs
  - namespaces

=== cluster-admin-role.yml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-admin
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["list","get","create"]
===

=== cluster-role-binding.yml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata: cluster-admin-role


Admission Controllers:

An admission controller is a piece of code that intercepts requests to the Kubernetes API server prior to persistence of the object, but after the request is authenticated and authorized.

Admission controllers may be validating, mutating, or both. Mutating controllers may modify objects related to the requests they admit; validating controllers may not.

View adm conts:
kube-apiserver -h | grep enable-admission-plugins
OR
kubeadm based setup:
kubectl exec -n kube-system kube-apiserver-controlplane -- kube-apiserver -h | grep enable-admission-plugins

To enable/disable admission controllers, use:
kube-apiserver.service or /etc/kubernetes/manifests/kube-apiserver.yaml (for kubeadm):
--enable-admission-plugins=blah
--disable-admission-plugins=blah

To check what adm conts are enabled/disabled:
ps -ef | grep kube-apiserver | grep admission-plugins


Validating and Mutating Admission Controllers:

- Usually mutating ones are invoked first so that validator can work properly
- External AdmConts: 
  - MutatingAdmissionWebhook
  - ValidatingAdmissionWebhook
- How to set this up:
  - Set up an admission webhook server
    - Receives a request object
    - Returns a response object saying whether the request was granted
  - Can be run externally or on K8S itself with a service so it is available externallly
=== val-webhook.yml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: "pod-policy.example.com"
webhooks:
- name: "pod-policy.example.com"
  clientConfig:
    service:
      namespace: "webhook-namespace"
      name: "webhook-service"
    caBundle: "asdfasfa"
  rules:
  - apiGroups: [""]
    apiVersions: ["v1"]
    operations: ["CREATE"]
    resources: ["pods"]
    scope: "Namespaced"
===


API Versions:

v1: Stable
alpha:
  - Cannot enable without flags in runtime config
  - May have bugs
  - May be dropped in future releases
beta:
  - Has e2e tests
  - May have minor bugs
  - Commitment to move to GA

Preferred API version: find with kubectl explain [deployment/object]

To convert yml files to a new version:
kubectl convert -f old-file --output-version new-api
kubectl convert -f nginx.yml --output-version apps/v1

To install kubectl convert:
Check k8s documentation


API Deprecation:
1: API elements may only be removed by incrementing the version of API group. IE, move from v1alpha1 to v1alpha2 and remove.
2: API objects must be able to round trip between API versions in a given release without information loss, with the exception of whole REST resources that do not exist in some versions. IE if you create a new field in a new version of an object, you must also add it in the previous version.
3. API version in a given track may not be deprecated until a new API version at least as stable is released.
4a. Other than the most recent versions in each track, old API versions must be supported after their announced deprecation for:
- GA: 12 months or 3 releases (whichever is longer)
- Beta: 9 months or 3 releases (longer)
- Alpha: 0 Releases
4b. The preferred API version and the storage version for a given group may not advance until after a release has been made that supports both the new version and the previous version. So when you release a new version, preferred cannot advance to the latest version.


What is the relationship between api groups, resources, fields?

Find what API group a resource belongs to:
k explain [resource_name]

How to find the preferred version of an API:
k proxy 8001 &
curl localhost:8081/apis/authorization.k8s.io

To enable alpha API, add the following to /etc/kubernetes/manifests/kube-apiserver.yml:
--runtime-config=[service]/[version]


CUSTOM RESOURCE DEFINITIONS

When you run kubectl commands, you're just reading/modifying data in ETCD.
It's the deployment/pod/whatever controller that does the actual work. 
It monitors ETCD and makes the necessary changes.
Custom resource definition tells K8S about your API

=== flightTicket-custom-definition.yml
apiVerion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: flighttickets.flights.com
spec:
  scope: Namespaced
  group: flights.com
  names:
    kind: FlightTicket
    singular: flightticket
    plural: flightticket
    shortNames:
    - ft
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
	properties:
	  spec:
	    type: object
	    properties:
	      from:
	        type: string
	      to:
	        type: string
	      number:
	        type: integer
		minimum: 1
		maximum: 10
===

If you create this CRD and flightTicket, it will be stored in ETCD but nothing else happens because there is no controller for this resource type.


CUSTOM CONTROLLERS


OPERATOR FRAMEWORK

Encompasses the customResourceDefinition and controller
